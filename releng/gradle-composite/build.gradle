plugins {
    id "com.github.dkorotych.gradle-maven-exec" version "1.2.2.1"
}

apply from: 'projectFinder.gradle'
apply from: 'gradle/console.gradle'
apply from: 'gradle/versions.gradle'
apply from: 'gradle/version-management.gradle'
apply from: 'gradle/copyright.gradle'

task('generatePrefs') {
    doLast {
        def projects = getProjectsFromLocationProperties()
        if (!projects.isEmpty()) {
            projects.each {
                file ->
                doGenerateInProject(file)
            }
        } else {
            // default behaviour if no locations.properties was generated by oomph
            file('../../../').listFiles()
            .findAll { file ->
                file.isDirectory() && XTEXT_GRADLE_PROJECTS.any{p->file.name.contains(p)} && new File(file, "settings.gradle").exists()
            }.each { file -> 
                doGenerateInProject(file)
            }
        }    
    }
}

def doGenerateInProject(File file) {
    def forceGeneration = hasProperty('forceGeneration');
    if (!(new File(file, '.settings')).exists()) {
        new File(file, '.settings').mkdir();
    }
    def prefsFile = new File(file, '.settings/org.eclipse.buildship.core.prefs')
    if (forceGeneration||!prefsFile.exists()) {
        prefsFile = new File(file, '.settings/org.eclipse.buildship.core.prefs')
        def pathRelative = relativePath(rootDir, file)
        logger.quiet("generating buildship prefs for " + file.path)
        prefsFile.text = "connection.gradle.distribution=GRADLE_DISTRIBUTION(WRAPPER)\nconnection.project.dir="+pathRelative.toFile().toString().replace('\\','/')+"\nproject.path=\\:"+file.name+"\n"
    }       
    file.listFiles().each { File fx -> 
        if (fx.isDirectory() && new File(fx, "build.gradle").exists()) {
            if (!(new File(fx, '.settings')).exists()) {
                new File(fx, '.settings').mkdir();
            }
            prefsFile = new File(fx, '.settings/org.eclipse.buildship.core.prefs')
            def pathRelative = relativePath(rootDir, fx)
            if (forceGeneration||!prefsFile.exists()) {
                logger.quiet("generating buildship prefs for " + fx.path)
                prefsFile.text = "connection.gradle.distribution=GRADLE_DISTRIBUTION(WRAPPER)\nconnection.project.dir="+pathRelative.toFile().toString().replace('\\','/')+"\nproject.path=\\:"+fx.name+"\n"
            }
        }

    }
}

def relativePath(File rootDir, File fx) {
    def pathAbsolute = java.nio.file.Paths.get(rootDir.absolutePath);
    def pathBase = java.nio.file.Paths.get(fx.absolutePath);
    def pathRelative = pathBase.relativize(pathAbsolute);
    return pathRelative;
}
