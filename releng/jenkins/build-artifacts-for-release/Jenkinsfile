pipeline {
  agent {
    kubernetes {
      label 'releng-build-artifacts-for-release-' + env.BUILD_NUMBER
      defaultContainer 'gradle'
      yaml '''
apiVersion: v1
kind: Pod
spec:
  containers:
  - name: jnlp
    image: 'eclipsecbi/jenkins-jnlp-agent'
    args: ['\$(JENKINS_SECRET)', '\$(JENKINS_NAME)']
    volumeMounts:
    - mountPath: /home/jenkins/.ssh
      name: volume-known-hosts
    resources:
      limits:
        memory: "0.5Gi"
        cpu: "0.2"
      requests:
        memory: "0.5Gi"
        cpu: "0.2"
  - name: gradle
    image: 'gradle:5.4'
    resources:
      limits:
        memory: "2.5Gi"
        cpu: "1.0"
      requests:
        memory: "2.5Gi"
        cpu: "1.0"
    volumeMounts:
    - name: settings-xml
      mountPath: /home/jenkins/.m2/settings.xml
      subPath: settings.xml
      readOnly: true
    - name: m2-repo
      mountPath: /home/jenkins/.m2/repository
  volumes:
  - name: volume-known-hosts
    configMap:
      name: known-hosts
  - name: settings-xml
    configMap: 
      name: m2-dir
      items:
      - key: settings.xml
        path: settings.xml
  - name: m2-repo
    emptyDir: {}
    '''
    }
  }

  options {
    buildDiscarder(logRotator(numToKeepStr:'15'))
    disableConcurrentBuilds()
    timeout(time: 45, unit: 'MINUTES')
    timestamps()
  }

  // https://jenkins.io/doc/book/pipeline/syntax/#triggers
  triggers {
    cron('50 21 * * *') // nightly at 21:50
  }
  
  parameters {
    string      (name: 'BRANCH_TO_DEPLOY', defaultValue: 'master', description: 'From which Git branch should the release be created (master for snapshot deployments)?')
    booleanParam(name: 'SIGN_JARS', defaultValue: true, description: 'Whether to sign jars using the Eclipse web service')
    booleanParam(name: 'PACK_JARS', defaultValue: true, description: 'Whether to pack jars using pack200')
  }
  
  environment {
    DOWNLOAD_AREA = '/home/data/httpd/download.eclipse.org/modeling/tmf/xtext/downloads/drops'
    KEYRING = credentials('252495d7-34e5-49de-8db4-bce7afae2da4')
  }

  stages {
    stage('Prepare') {
      steps {
        git branch: 'master', changelog: false, poll: false, url: 'https://github.com/xtext/publishing.git'
      }
    }
    
    stage('Execute Publishing Plugin') {
      steps {
        sh '''
          gradle \
            --stacktrace \
            --refresh-dependencies \
            -Posspub.userMavenSettings=/home/jenkins/.m2/settings.xml \
            -PJENKINS_URL=$JENKINS_URL \
            -Psigning.secretKeyRingFile=$KEYRING \
            -Psigning.keyId=D1AE0CFD \
            clean publishMavenXtext publishEclipseXtext
        '''
      }
    }

  }

}